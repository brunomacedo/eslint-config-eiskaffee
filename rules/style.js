module.exports = {
	rules: {
		'array-bracket-newline': ['off', 'consistent'],
		'array-element-newline': ['off', { multiline: true, minItems: 3 }],
		'array-bracket-spacing': ['error', 'never'],
		'block-spacing': ['error', 'always'],
		'brace-style': ['error', '1tbs', { allowSingleLine: true }],
		camelcase: ['error', { properties: 'never' }],
		'capitalized-comments': ['off', 'never', {
			line: {
				ignorePattern: '.*',
				ignoreInlineComments: true,
				ignoreConsecutiveComments: true,
			},
			block: {
				ignorePattern: '.*',
				ignoreInlineComments: true,
				ignoreConsecutiveComments: true,
			},
		}],
		'comma-dangle': ['error', {
			arrays: 'always-multiline',
			objects: 'always-multiline',
			imports: 'always-multiline',
			exports: 'always-multiline',
			functions: 'always-multiline',
		}],
		'comma-spacing': ['error', { before: false, after: true }],
		'comma-style': ['error', 'last', {
			exceptions: {
				ArrayExpression: false,
				ArrayPattern: false,
				ArrowFunctionExpression: false,
				CallExpression: false,
				FunctionDeclaration: false,
				FunctionExpression: false,
				ImportDeclaration: false,
				ObjectExpression: false,
				ObjectPattern: false,
				VariableDeclaration: false,
				NewExpression: false,
			},
		}],
		'computed-property-spacing': ['error', 'never'],
		'consistent-this': 'off',
		'eol-last': ['error', 'always'],
		'func-call-spacing': ['error', 'never'],
		'func-name-matching': ['off', 'always', {
			includeCommonJSModuleExports: false,
		}],
		'func-names': 'warn',
		'func-style': ['off', 'expression'],
		'function-paren-newline': ['error', 'multiline'],
		'id-blacklist': 'off',
		'id-length': 'off',
		'id-match': 'off',
		'implicit-arrow-linebreak': ['error', 'beside'],
		indent: ['error', 'tab', {
			SwitchCase: 1,
			VariableDeclarator: 1,
			outerIIFEBody: 1,
			FunctionDeclaration: {
				parameters: 1,
				body: 1,
			},
			FunctionExpression: {
				parameters: 1,
				body: 1,
			},
			CallExpression: {
				arguments: 1,
			},
			ArrayExpression: 1,
			ObjectExpression: 1,
			ImportDeclaration: 1,
			flatTernaryExpressions: false,
			ignoredNodes: ['JSXElement', 'JSXElement > *', 'JSXAttribute', 'JSXIdentifier', 'JSXNamespacedName', 'JSXMemberExpression', 'JSXSpreadAttribute', 'JSXExpressionContainer', 'JSXOpeningElement', 'JSXClosingElement', 'JSXText', 'JSXEmptyExpression', 'JSXSpreadChild'],
			ignoreComments: false,
		}],
		'jsx-quotes': ['off', 'prefer-double'],
		'key-spacing': ['error', { beforeColon: false, afterColon: true }],
		'keyword-spacing': ['error', {
			before: true,
			after: true,
			overrides: {
				return: { after: true },
				throw: { after: true },
				case: { after: true },
			},
		}],
		'linebreak-style': ['error', 'unix'],
		'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: false }],
		'lines-around-comment': 'off',
		'multiline-comment-style': ['off', 'starred-block'],
		'multiline-ternary': ['off', 'never'],
		'new-parens': 'error',
		'newline-after-var': 'off',
		'newline-before-return': 'off',
		'no-array-constructor': 'error',
		'no-bitwise': 'error',
		'no-continue': 'error',
		'no-inline-comments': 'off',
		'no-lonely-if': 'error',
		'no-mixed-operators': ['error', {
			groups: [
				['%', '**'],
				['%', '+'],
				['%', '-'],
				['%', '*'],
				['%', '/'],
				['**', '+'],
				['**', '-'],
				['**', '*'],
				['**', '/'],
				['&', '|', '^', '~', '<<', '>>', '>>>'],
				['==', '!=', '===', '!==', '>', '>=', '<', '<='],
				['&&', '||'],
				['in', 'instanceof'],
			],
			allowSamePrecedence: false,
		}],
		'no-multi-assign': ['error'],
		'no-multiple-empty-lines': ['error', { max: 2, maxEOF: 1 }],
		'no-negated-condition': 'off',
		'no-nested-ternary': 'error',
		'no-new-object': 'error',
		'no-plusplus': 'error',
		'no-restricted-syntax': [
			'error',
			{
				selector: 'ForInStatement',
				message: 'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
			},
			{
				selector: 'ForOfStatement',
				message: 'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
			},
			{
				selector: 'LabeledStatement',
				message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
			},
			{
				selector: 'WithStatement',
				message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
			},
		],
		'no-spaced-func': 'error',
		'no-ternary': 'off',
		'no-trailing-spaces': ['error', {
			skipBlankLines: false,
			ignoreComments: false,
		}],
		'no-underscore-dangle': ['error', {
			allow: [],
			allowAfterThis: false,
			allowAfterSuper: false,
			enforceInMethodNames: false,
		}],
		'no-unneeded-ternary': ['error', { defaultAssignment: false }],
		'no-whitespace-before-property': 'error',
		'nonblock-statement-body-position': ['error', 'beside', { overrides: {} }],
		'object-curly-spacing': ['error', 'always'],
		'one-var': ['error', 'never'],
		'one-var-declaration-per-line': ['error', 'always'],
		'operator-assignment': ['error', 'always'],
		'operator-linebreak': ['error', 'before', { overrides: { '=': 'none' } }],
		'padded-blocks': ['error', { blocks: 'never', classes: 'never', switches: 'never' }],
		'padding-line-between-statements': 'off',
		'quote-props': ['error', 'as-needed', { keywords: false, unnecessary: true, numbers: false }],
		quotes: ['error', 'single', { avoidEscape: true }],
		'require-jsdoc': 'off',
		semi: ['error', 'always'],
		'semi-spacing': ['error', { before: false, after: true }],
		'semi-style': ['error', 'last'],
		'sort-keys': ['off', 'asc', { caseSensitive: false, natural: true }],
		'sort-vars': 'off',
		'space-before-blocks': 'error',
		'space-before-function-paren': ['error', {
			anonymous: 'always',
			named: 'never',
			asyncArrow: 'always',
		}],
		'space-in-parens': ['error', 'never'],
		'space-infix-ops': 'error',
		'space-unary-ops': ['error', {
			words: true,
			nonwords: false,
			overrides: {
			},
		}],
		'spaced-comment': ['error', 'always', {
			line: {
				exceptions: ['-', '+'],
				markers: ['=', '!'],
			},
			block: {
				exceptions: ['-', '+'],
				markers: ['=', '!'],
				balanced: true,
			},
		}],
		'switch-colon-spacing': ['error', { after: true, before: false }],
		'template-tag-spacing': ['error', 'never'],
		'unicode-bom': ['error', 'never'],
		'wrap-regex': 'off',
	},
};
